#define BLYNK_TEMPLATE_ID "TMPL64kx7BMnh"
#define BLYNK_TEMPLATE_NAME "relay"
#define BLYNK_AUTH_TOKEN "M2laaUXwKszwPezQeVTfHx8VyNrFnRGk"

#include <WiFi.h>
#include <BlynkSimpleEsp32.h>



const int MQ135pin = 34;
const int ledBadQuality = 10;
const int SMOKE_THRESHOLD = 4;
char ssid[] = "Minta izin dulu";
char pass[] = "rivaldiilham";

unsigned long previousMillis = 0;
const long interval = 5;
unsigned long startMillis = 0;
unsigned long activeTime = 0;

bool isBlynkActive = false;
bool isSerialPrintActive = true;

void setup() {
  Serial.begin(115200);
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);

  Blynk.virtualWrite(V1, "CLEARDATA");
  Blynk.virtualWrite(V4, "CLEARDATA");
}

void loop() {
  Blynk.run();

  unsigned long currentMillis = millis();

  if (isBlynkActive && currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    int rawValue = analogRead(MQ135pin);
    float voltage = rawValue / 1024.0 * 5.0;
    float resistance = (5.0 - voltage) / voltage;

    float ppm = 1.0 / (0.03588 * pow(resistance, 1.336));
    float co = ppm / 2.2;
    float methane = ppm / 2.7;
    float ammonia = ppm / 3.6;

    if (isSerialPrintActive) {
      Serial.print("Raw Analog Value: ");
      Serial.println(rawValue);
      Serial.print("Voltage: ");
      Serial.println(voltage, 2);
      Serial.print("Sensor Resistance: ");
      Serial.println(resistance, 2);
      Serial.print("CO2 PPM: ");
      Serial.println(ppm, 2);
      Serial.print("CO: ");
      Serial.println(co, 2);
      Serial.print("Methane (CH4) PPM: ");
      Serial.println(methane, 2);
      Serial.print("Ammonia (NH3) PPM: ");
      Serial.println(ammonia, 2);
    }

    Blynk.virtualWrite(V1, ppm);
    Blynk.virtualWrite(V5, co);
    Blynk.virtualWrite(V6, methane);
    Blynk.virtualWrite(V7, ammonia);
    Blynk.virtualWrite(V9, ppm);

    if (co > SMOKE_THRESHOLD) {
      Blynk.virtualWrite(V10, 1);
      digitalWrite(ledBadQuality, HIGH);
    } else {
      Blynk.virtualWrite(V10, 0);
      digitalWrite(ledBadQuality, LOW);
    }
  }

  activeTime = (currentMillis - startMillis) / 1000;

  if (isBlynkActive) {
    Blynk.virtualWrite(V3, activeTime);
    Blynk.virtualWrite(V11, "Timestamp: " + String(Time.format("%H:%M:%S")));
  }

  delay(5);
}

BLYNK_CONNECTED() {
  // Your existing code for BLYNK_CONNECTED
  // ...
}

BLYNK_WRITE(V0) {
  isBlynkActive = param.asInt();  // Mengaktifkan atau menonaktifkan Blynk berdasarkan nilai tombol
  if (isBlynkActive) {
    startMillis = millis();  // Reset timestamp saat V0 aktif
    Blynk.virtualWrite(V8, "System has been active for: " + String(activeTime) + "s");
  }
}

BLYNK_WRITE(V2) {
  // Your existing code for BLYNK_WRITE(V2)
  // ...
}
