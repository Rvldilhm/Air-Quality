#define BLYNK_TEMPLATE_ID "TMPL64kx7BMnh"
#define BLYNK_TEMPLATE_NAME "relay"
#define BLYNK_AUTH_TOKEN "M2laaUXwKszwPezQeVTfHx8VyNrFnRGk"

#include <WiFi.h>
#include <BlynkSimpleEsp32.h>


const int MQ135pin = 34; // Define the pin for MQ135 sensor
const int ledBadQuality = 10;
const int SMOKE_THRESHOLD = 4; // Adjust this threshold based on your application
char ssid[] = "Minta izin dulu"; // Replace with your WiFi SSID
char pass[] = "rivaldiilham"; // Replace with your WiFi password

unsigned long previousMillis = 0;  // will store last time MQ135 was read
const long interval = 60000;        // interval at which to read MQ135 (milliseconds)

unsigned long startMillis = 0;  // To store the start time
unsigned long activeTime = 0;  // To store the active time

void setup() {
  Serial.begin(115200);
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);

  // Initialize Blynk chart
  Blynk.virtualWrite(V1, "CLEARDATA");
  Blynk.virtualWrite(V4, "CLEARDATA");

  startMillis = millis();  // Record the start time
}

void loop() {
  Blynk.run();

  unsigned long currentMillis = millis();

  // Check if it's time to read MQ135
  if (currentMillis - previousMillis >= interval) {
    // Save the last time MQ135 was read
    previousMillis = currentMillis;

    // MQ135 reading and Blynk update code
    int rawValue = analogRead(MQ135pin);
    float voltage = rawValue / 1024.0 * 5.0;
    float resistance = (5.0 - voltage) / voltage;

    // Calculate CO2, CO, and other gases
    float ppm = 1.0 / (0.03588 * pow(resistance, 1.336));
    float co = ppm / 2.2; // Approximate conversion from PPM to CO
    float methane = ppm / 2.7; // Approximate conversion from PPM to CH4
    float ammonia = ppm / 3.6; // Approximate conversion from PPM to NH3

    // Debugging: Print values to Serial Monitor
    Serial.print("Raw Analog Value: ");
    Serial.println(rawValue);
    Serial.print("Voltage: ");
    Serial.println(voltage, 2); // Print with 2 decimal places
    Serial.print("Sensor Resistance: ");
    Serial.println(resistance, 2); // Print with 2 decimal places
    Serial.print("CO2 PPM: ");
    Serial.println(ppm, 2); // Print with 2 decimal places
    Serial.print("CO: ");
    Serial.println(co, 2); // Print with 2 decimal places
    Serial.print("Methane (CH4) PPM: ");
    Serial.println(methane, 2); // Print with 2 decimal places
    Serial.print("Ammonia (NH3) PPM: ");
    Serial.println(ammonia, 2); // Print with 2 decimal places

    // Display CO2, CO, and other gases on Blynk app
    Blynk.virtualWrite(V1, ppm);
    Blynk.virtualWrite(V5, co);
    Blynk.virtualWrite(V6, methane);
    Blynk.virtualWrite(V7, ammonia);
    Blynk.virtualWrite(V9, ppm);

    // Add CO2 value to Blynk chart

    // Check CO2 levels and control LED
    if (co > SMOKE_THRESHOLD) {
      Blynk.virtualWrite(V10, 1);
      digitalWrite(ledBadQuality, HIGH);
    } else {
      Blynk.virtualWrite(V10, 0);
      digitalWrite(ledBadQuality, LOW);
    }
  }

  // Update active time
  activeTime = (currentMillis - startMillis) / 1000;  // Convert milliseconds to seconds

  // Display active time on Blynk
  Blynk.virtualWrite(V3, activeTime);

  // Other non-blocking tasks can be added here
  // ...

  // Adjust the delay based on your application needs
  delay(10);
}

BLYNK_CONNECTED() {
  // Your existing code for BLYNK_CONNECTED
  // ...
}
